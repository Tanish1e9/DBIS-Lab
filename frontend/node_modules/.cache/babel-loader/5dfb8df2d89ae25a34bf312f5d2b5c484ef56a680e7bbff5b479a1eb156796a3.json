{"ast":null,"code":"var _jsxFileName = \"/home/tanish/Documents/database lab/lab5-files/frontend/src/pages/Home.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport { useNavigate } from \"react-router\";\nimport { apiUrl } from \"../config/config\";\n\n// Use the API you implemented earlier, \n// to check if the user is logged in or not\n// if yes, navigate to the dashboard\n// else to the login page\n\n// use the React Hooks useNavigate and useEffect\n// to implement this component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const navigate = useNavigate(); // Use this to redirect users\n\n  useEffect(() => {\n    const checkStatus = async () => {\n      try {\n        const response = await fetch(`${apiUrl}/isLoggedIn`, {\n          method: \"GET\",\n          credentials: \"include\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        });\n        if (!response.ok) {\n          navigate('/login');\n        } else {\n          navigate('/dashboard');\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    checkStatus();\n  }, [navigate]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Checking authentication...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 10\n  }, this);\n};\n_s(Home, \"0pNeyzXk/ByIxyERsdaIrG6js9s=\", false, function () {\n  return [useNavigate];\n});\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useEffect","useNavigate","apiUrl","jsxDEV","_jsxDEV","Home","_s","navigate","checkStatus","response","fetch","method","credentials","headers","ok","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/tanish/Documents/database lab/lab5-files/frontend/src/pages/Home.jsx"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport { useNavigate } from \"react-router\";\nimport { apiUrl } from \"../config/config\";\n\n// Use the API you implemented earlier, \n// to check if the user is logged in or not\n// if yes, navigate to the dashboard\n// else to the login page\n\n// use the React Hooks useNavigate and useEffect\n// to implement this component\n\nconst Home = () => {\n  const navigate = useNavigate(); // Use this to redirect users\n\n  useEffect(() => {\n    const checkStatus = async () => {\n      try {\n        const response = await fetch(`${apiUrl}/isLoggedIn`,\n          {\n            method: \"GET\",\n            credentials: \"include\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            }\n          }\n        );\n        \n        if (!response.ok) {\n          navigate('/login');\n        }\n        else{\n          navigate('/dashboard');\n        }\n      } catch (error) {\n        console.error(error);\n      }    \n    };\n    checkStatus();\n  }, [navigate]);\n\n  return <div>Checking authentication...</div>;\n};\n\nexport default Home;\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,WAAW,QAAQ,cAAc;AAC1C,SAASC,MAAM,QAAQ,kBAAkB;;AAEzC;AACA;AACA;AACA;;AAEA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAMC,QAAQ,GAAGN,WAAW,CAAC,CAAC,CAAC,CAAC;;EAEhCD,SAAS,CAAC,MAAM;IACd,MAAMQ,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC9B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,MAAM,aAAa,EACjD;UACES,MAAM,EAAE,KAAK;UACbC,WAAW,EAAE,SAAS;UACtBC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB;QACF,CACF,CAAC;QAED,IAAI,CAACJ,QAAQ,CAACK,EAAE,EAAE;UAChBP,QAAQ,CAAC,QAAQ,CAAC;QACpB,CAAC,MACG;UACFA,QAAQ,CAAC,YAAY,CAAC;QACxB;MACF,CAAC,CAAC,OAAOQ,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACtB;IACF,CAAC;IACDP,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,CAACD,QAAQ,CAAC,CAAC;EAEd,oBAAOH,OAAA;IAAAa,QAAA,EAAK;EAA0B;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAC9C,CAAC;AAACf,EAAA,CA9BID,IAAI;EAAA,QACSJ,WAAW;AAAA;AAAAqB,EAAA,GADxBjB,IAAI;AAgCV,eAAeA,IAAI;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}