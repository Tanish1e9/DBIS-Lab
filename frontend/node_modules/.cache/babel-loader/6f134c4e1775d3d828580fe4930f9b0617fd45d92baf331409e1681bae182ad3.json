{"ast":null,"code":"var _jsxFileName = \"/home/tanish/Documents/database lab/lab5-files/frontend/src/pages/Login.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router\";\nimport { apiUrl } from \"../config/config\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = () => {\n  _s();\n  const navigate = useNavigate(); // Use this to redirect users\n\n  // useEffect checks if the user is already logged in\n  // if already loggedIn then it will simply navigate to the dashboard\n  // TODO: Implement the checkStatus function.\n  useEffect(() => {\n    const checkStatus = async () => {\n      // Implement your logic here\n      try {\n        const response = await fetch(`${apiUrl}/isLoggedIn`, {\n          method: \"GET\",\n          credentials: \"include\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        });\n        if (response.ok) {\n          return navigate('/dashboard');\n        }\n      } catch (error) {\n        console.error(error);\n        return navigate('/notfound');\n      }\n    };\n    checkStatus();\n  }, [navigate]);\n\n  // Read about useState to manage form data\n  const [formData, setFormData] = useState({\n    email: \"\",\n    password: \"\"\n  });\n  const [errormessage, seterrormessage] = useState(null);\n\n  // TODO: This function handles input field changes\n  const handleChange = e => {\n    // Implement your logic here\n    const {\n      name,\n      value\n    } = e.target;\n\n    // Read about the spread operator (...) to understand this syntax\n    setFormData({\n      ...formData,\n      [name]: value\n    });\n  };\n\n  // TODO: Implement the login operation\n  // This function should send form data to the server\n  // and handle login success/failure responses.\n  // Use the API you made for handling this.\n  const handleSubmit = async e => {\n    e.preventDefault();\n    // Implement the login logic here\n    try {\n      const response = await fetch(`${apiUrl}/login`, {\n        method: \"POST\",\n        credentials: \"include\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email: formData.email,\n          password: formData.password\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        return navigate('/dashboard');\n      } else {\n        console.log(data.message);\n        seterrormessage(data.message);\n      }\n    } catch (error) {\n      console.log(error);\n      return navigate('/notfound');\n    }\n  };\n\n  // TODO: Use JSX to create a login form with input fields for:\n  // - Email\n  // - Password\n  // - A submit button\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: errormessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Email: \", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"email\",\n          name: \"email\",\n          required: true,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 23\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 110\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Password \", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          name: \"password\",\n          required: true,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 25\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 121\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        onSubmit: handleSubmit,\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n_s(Login, \"kplbwI/Yd/xlLSrgeJpAVvTlkdg=\", false, function () {\n  return [useNavigate];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","apiUrl","jsxDEV","_jsxDEV","Login","_s","navigate","checkStatus","response","fetch","method","credentials","headers","ok","error","console","formData","setFormData","email","password","errormessage","seterrormessage","handleChange","e","name","value","target","handleSubmit","preventDefault","body","JSON","stringify","data","json","log","message","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","id","required","onChange","_c","$RefreshReg$"],"sources":["/home/tanish/Documents/database lab/lab5-files/frontend/src/pages/Login.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router\";\nimport { apiUrl } from \"../config/config\";\n\nconst Login = () => {\n  const navigate = useNavigate(); // Use this to redirect users\n\n\n  // useEffect checks if the user is already logged in\n  // if already loggedIn then it will simply navigate to the dashboard\n  // TODO: Implement the checkStatus function.\n  useEffect(() => {\n    const checkStatus = async () => {\n      // Implement your logic here\n      try {\n        const response = await fetch(`${apiUrl}/isLoggedIn`,\n          {\n            method: \"GET\",\n            credentials: \"include\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n          }\n        );\n        if (response.ok) {\n          return navigate('/dashboard');\n        }\n      } catch (error) {\n        console.error(error);\n        return navigate('/notfound');\n      }    \n      \n    };\n    checkStatus();\n  }, [navigate]);\n\n  // Read about useState to manage form data\n  const [formData, setFormData] = useState({\n    email: \"\",\n    password: \"\",\n  });\n  const [errormessage,seterrormessage] = useState(null);\n\n  // TODO: This function handles input field changes\n  const handleChange = (e) => {\n    // Implement your logic here\n    const { name, value } = e.target;\n    \n    // Read about the spread operator (...) to understand this syntax\n    setFormData({\n      ...formData,\n      [name]: value,\n    });\n  };\n\n  // TODO: Implement the login operation\n  // This function should send form data to the server\n  // and handle login success/failure responses.\n  // Use the API you made for handling this.\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    // Implement the login logic here\n    try{\n      const response = await fetch(`${apiUrl}/login`,{\n          method : \"POST\",\n          credentials : \"include\",\n          headers : {\n              \"Content-Type\" : \"application/json\"\n          },\n          body: JSON.stringify({\n            email: formData.email,\n            password: formData.password\n          })\n      });\n\n      const data = await response.json();\n      if(response.ok){\n        return navigate('/dashboard');\n      }\n      else{\n        console.log(data.message);\n        seterrormessage(data.message);\n      }\n    } catch(error){\n      console.log(error);\n      return navigate('/notfound');\n    }\n  };\n\n  // TODO: Use JSX to create a login form with input fields for:\n  // - Email\n  // - Password\n  // - A submit button\n  return (\n    <div>   \n      <h3>{errormessage}</h3>   \n      <form onSubmit={handleSubmit}>\n        <label>Email: <input type=\"email\" id=\"email\" name=\"email\" required onChange={handleChange}/> </label><br/>\n        <label>Password <input type=\"password\" id=\"password\" name=\"password\" required onChange={handleChange}/> </label><br/>\n        <button type=\"submit\" onSubmit={handleSubmit}>Login</button>\n      </form>\n    </div>\n  );\n};\n\nexport default Login;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}