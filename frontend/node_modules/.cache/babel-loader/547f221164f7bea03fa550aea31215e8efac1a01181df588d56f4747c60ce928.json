{"ast":null,"code":"var _jsxFileName = \"/home/tanish/Documents/database lab/lab5-files/frontend/src/pages/Login.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router\";\nimport { apiUrl } from \"../config/config\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = () => {\n  _s();\n  const navigate = useNavigate(); // Use this to redirect users\n\n  // useEffect checks if the user is already logged in\n  // if already loggedIn then it will simply navigate to the dashboard\n  // TODO: Implement the checkStatus function.\n  useEffect(() => {\n    const checkStatus = async () => {\n      // Implement your logic here\n    };\n    checkStatus();\n  }, []);\n\n  // Read about useState to manage form data\n  const [formData, setFormData] = useState({\n    email: \"\",\n    password: \"\"\n  });\n\n  // TODO: This function handles input field changes\n  const handleChange = e => {\n    // Implement your logic here\n  };\n\n  // TODO: Implement the login operation\n  // This function should send form data to the server\n  // and handle login success/failure responses.\n  // Use the API you made for handling this.\n  const handleSubmit = async e => {\n    e.preventDefault();\n    // Implement the login logic here\n  };\n\n  // TODO: Use JSX to create a login form with input fields for:\n  // - Email\n  // - Password\n  // - A submit button\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children:\n    /*#__PURE__*/\n    /* Implement the form UI here */\n    // <input type=\"email\" id=\"email\" name=\"email\" required>\n    // <input type=\"password\" id=\"password\" name=\"password\" required>\n    // <button type=\"submit\">Login</button>\n    _jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Name: \", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 24\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(Login, \"WSlUXCuQ3D5jeyjyF2F/zSQDlck=\", false, function () {\n  return [useNavigate];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","apiUrl","jsxDEV","_jsxDEV","Login","_s","navigate","checkStatus","formData","setFormData","email","password","handleChange","e","handleSubmit","preventDefault","children","type","name","fileName","_jsxFileName","lineNumber","columnNumber","value","_c","$RefreshReg$"],"sources":["/home/tanish/Documents/database lab/lab5-files/frontend/src/pages/Login.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router\";\nimport { apiUrl } from \"../config/config\";\n\nconst Login = () => {\n  const navigate = useNavigate(); // Use this to redirect users\n\n\n  // useEffect checks if the user is already logged in\n  // if already loggedIn then it will simply navigate to the dashboard\n  // TODO: Implement the checkStatus function.\n  useEffect(() => {\n    const checkStatus = async () => {\n      // Implement your logic here\n      \n      \n    };\n    checkStatus();\n  }, []);\n\n  // Read about useState to manage form data\n  const [formData, setFormData] = useState({\n    email: \"\",\n    password: \"\",\n  });\n\n  // TODO: This function handles input field changes\n  const handleChange = (e) => {\n    // Implement your logic here\n  };\n\n  // TODO: Implement the login operation\n  // This function should send form data to the server\n  // and handle login success/failure responses.\n  // Use the API you made for handling this.\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    // Implement the login logic here\n  };\n\n  // TODO: Use JSX to create a login form with input fields for:\n  // - Email\n  // - Password\n  // - A submit button\n  return (\n    <div>\n      {\n        /* Implement the form UI here */\n        // <input type=\"email\" id=\"email\" name=\"email\" required>\n        // <input type=\"password\" id=\"password\" name=\"password\" required>\n        // <button type=\"submit\">Login</button>\n        <form>\n          <label>Name: <input type=\"text\" name=\"name\" /></label>\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      }\n    </div>\n  );\n};\n\nexport default Login;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,cAAc;AAC1C,SAASC,MAAM,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAMC,QAAQ,GAAGN,WAAW,CAAC,CAAC,CAAC,CAAC;;EAGhC;EACA;EACA;EACAD,SAAS,CAAC,MAAM;IACd,MAAMQ,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC9B;IAAA,CAGD;IACDA,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC;IACvCY,KAAK,EAAE,EAAE;IACTC,QAAQ,EAAE;EACZ,CAAC,CAAC;;EAEF;EACA,MAAMC,YAAY,GAAIC,CAAC,IAAK;IAC1B;EAAA,CACD;;EAED;EACA;EACA;EACA;EACA,MAAMC,YAAY,GAAG,MAAOD,CAAC,IAAK;IAChCA,CAAC,CAACE,cAAc,CAAC,CAAC;IAClB;EACF,CAAC;;EAED;EACA;EACA;EACA;EACA,oBACEZ,OAAA;IAAAa,QAAA;IAAA;IAEI;IACA;IACA;IACA;IACAb,OAAA;MAAAa,QAAA,gBACEb,OAAA;QAAAa,QAAA,GAAO,QAAM,eAAAb,OAAA;UAAOc,IAAI,EAAC,MAAM;UAACC,IAAI,EAAC;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACtDnB,OAAA;QAAOc,IAAI,EAAC,QAAQ;QAACM,KAAK,EAAC;MAAQ;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEN,CAAC;AAEV,CAAC;AAACjB,EAAA,CAtDID,KAAK;EAAA,QACQJ,WAAW;AAAA;AAAAwB,EAAA,GADxBpB,KAAK;AAwDX,eAAeA,KAAK;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}